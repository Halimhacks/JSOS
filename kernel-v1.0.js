var fs = {
    "name": "/",
    "type": "directory",
    "contents": [
        {
            "name": "js",
            "type": "directory",
            "contents": [
                {
                    "name": "clear",
                    "type": "file",
                    "contents": "document.body.innerHTML = null;"
                },
                {
                    "name": "reset",
                    "type": "file",
                    "contents": "window.location.reload();"
                },
                {
                    "name": "alias",
                    "type": "file",
                    "contents": "switch(args.length) {case 0: aliases.forEach(alias => { stdout += `${alias.alias}='${alias.ref}'\\n`; }); break; case 1: if(aliases.findIndex(obj => obj.alias == args[0]) == -1) {break;} let obj = aliases[aliases.findIndex(obj => obj.alias == args[0])]; stdout = `${obj.alias}='${obj.ref}'`; break; default: aliases.push({ alias: args[0], ref: args.slice(1).join(' ') });}"
                },
                {
                    "name": "echo",
                    "type": "file",
                    "contents": "stdout = args.join(' ');"
                },
                {
                    "name": "history",
                    "type": "file",
                    "contents": "stdout = history.join('\\n');"
                },
                {
                    "name": "pwd",
                    "type": "file",
                    "contents": "stdout = pwd;"
                },
                {
                    "name": "source",
                    "type": "file",
                    "contents": "nopts.forEach(file => {if (doesExist(findRelativePath(file), 'file').exists) { eval(pathToNode(findRelativePath(file)).contents); } else {stdout = doesExist(findRelativePath(file), 'file').message;};});"
                },
                {
                    "name": "exit",
                    "type": "file",
                    "contents": "window.close();"
                },
                {
                    "name": "ls",
                    "type": "file",
                    "contents": "if(nopts.length == 0) {     stdout = opts.findIndex(obj => obj.opt == '--color') !== -1 ? pathToNode(findRelativePath(nopts[0])).contents.map(obj => `<span style='font-weight: ${obj.type === 'directory' ? 'bold' : obj.weight};'>${obj.name}</span>`).join(opts.findIndex(obj => obj.opt == '-l') !== -1 ? '\\n' : ' ') : pathToNode(findRelativePath(nopts[0])).contents.map(obj => obj.name).join(opts.findIndex(obj => obj.opt == '-l') !== -1 ? '\\n' : ' '); } else {     nopts.forEach(dir => {         if(doesExist(findRelativePath(dir), 'directory').exists) {             stdout = `${dir}:\\n` + opts.findIndex(obj => obj.opt == '--color') !== -1 ? pathToNode(findRelativePath(dir)).contents.map(obj => `<span style='font-weight: ${obj.type === 'directory' ? 'bold' : obj.weight};'>${obj.name}</span>`).join(opts.findIndex(obj => obj.opt == '-l') !== -1 ? '\\n' : ' ') : pathToNode(findRelativePath(dir)).contents.map(obj => obj.name).join(opts.findIndex(obj => obj.opt == '-l') !== -1 ? '\\n' : ' ');         }         else {             stdout = doesExist(findRelativePath(dir), 'directory').message;         }     }); }"
                },
                {
                    "name": "cd",
                    "type": "file",
                    "contents": "if(doesExist(findRelativePath(args[0]), 'directory').exists) {pwd = findRelativePath(args[0]);} else {stdout = doesExist(findRelativePath(args[0]), 'directory').message;}"
                },
                {
                    "name": "cat",
                    "type": "file",
                    "contents": "if(doesExist(findRelativePath(nopts[0]), 'file').exists) {stdout = pathToNode(findRelativePath(nopts[0])).contents;} else {stdout = doesExist(findRelativePath(nopts[0]), 'file').message;}"
                },
                {
                    "name": "touch",
                    "type": "file",
                    "contents": "if(doesExist(parentDirOf(findRelativePath(nopts[0])), 'directory').exists) {if(!doesExist(findRelativePath(nopts[0]), 'file').exists) {pathToNode(parentDirOf(findRelativePath(nopts[0]))).contents.push({ name: fileOfPath(nopts[0]), type: 'file', contents: '' })}} else {stdout = doesExist(parentDirOf(findRelativePath(nopts[0])), 'directory').message;}"
                },
                {
                    "name": "nano",
                    "type": "file",
                    "contents": "if(!nopts[0]) {stdout = 'Provide file name';} else {if(doesExist(parentDirOf(findRelativePath(nopts[0])), 'directory').exists) {document.body.style.overflowY = 'hidden';window.removeEventListener('click', focuslastinp);const temp = document.body.innerHTML;document.body.innerHTML = `<textarea class='texteditor'>${doesExist(findRelativePath(nopts[0]), 'file').exists ? pathToNode(findRelativePath(nopts[0])).contents : ''}</textarea>`;setTimeout(() => {window.scrollTo(0, 0);document.querySelector('.texteditor').focus();}, 10);window.addEventListener('keydown', function handleTextEditorShortcuts(keyE) {if(keyE.ctrlKey && keyE.key === 's') {keyE.preventDefault();if (!doesExist(findRelativePath(args[0]), 'file').exists) {pathToNode(parentDirOf(findRelativePath(nopts[0]))).contents.push({name: nopts[0], type: 'file', contents: document.querySelector('.texteditor').value });} else {pathToNode(findRelativePath(nopts[0])).contents = document.querySelector('.texteditor').value;}} if(keyE.key === 'Escape' || keyE.key === 'GoBack') {keyE.preventDefault();window.removeEventListener('keydown', handleTextEditorShortcuts);window.addEventListener('click', focuslastinp);document.body.innerHTML = temp + '\\n'; document.body.style.overflowY = 'auto';NewCommandLine();focuslastinp();}}); } else {stdout = doesExist(parentDirOf(findRelativePath(nopts[0])), 'directory').message;}}"
                },
                {
                    "name": "mkdir",
                    "type": "file",
                    "contents": "if(doesExist(parentDirOf(findRelativePath(nopts[0])), 'directory').exists) {if(!doesExist(findRelativePath(nopts[0]), 'directory').exists) {pathToNode(parentDirOf(findRelativePath(nopts[0]))).contents.push({name: fileOfPath(nopts[0]), type: 'directory', contents: [] })}} else {stdout = doesExist(parentDirOf(findRelativePath(nopts[0])), 'directory').message;}"
                },
                {
                    "name": "rm",
                    "type": "file",
                    "contents": "if(doesExist(parentDirOf(findRelativePath(nopts[0])), 'directory').exists) {if(doesExist(findRelativePath(nopts[0]), 'any').exists) {pathToNode(parentDirOf(findRelativePath(nopts[0]))).contents.splice([pathToNode(parentDirOf(findRelativePath(nopts[0]))).contents.findIndex(obj => obj.name == fileOfPath(nopts[0]) && obj.type == pathToNode(findRelativePath(nopts[0])).type)], 1);} else {stdout = doesExist(findRelativePath(nopts[0]), 'any').message;}}"
                },
                {
                    "name": "cp",
                    "type": "file",
                    "contents": "if(doesExist(findRelativePath(nopts[0]), 'any').exists) {if(doesExist(parentDirOf(findRelativePath(nopts[1])), 'directory').exists) {pathToNode(parentDirOf(findRelativePath(nopts[1]))).contents.push({name: fileOfPath(nopts[1]), type: pathToNode(findRelativePath(nopts[0])).type, contents: pathToNode(findRelativePath(nopts[0])).contents });} else {stdout = doesExist(parentDirOf(findRelativePath(nopts[1])), 'directory').message;}} else {stdout = doesExist(findRelativePath(nopts[0]), 'any').message;}"
                },
                {
                    "name": "mv",
                    "type": "file",
                    "contents": "if(doesExist(findRelativePath(nopts[0]), 'any').exists) {if(doesExist(parentDirOf(findRelativePath(nopts[1])), 'directory').exists) {pathToNode(parentDirOf(findRelativePath(nopts[1]))).contents.push({name: fileOfPath(nopts[1]), type: pathToNode(findRelativePath(nopts[0])).type, contents: pathToNode(findRelativePath(nopts[0])).contents }); pathToNode(parentDirOf(findRelativePath(nopts[0]))).contents.splice([pathToNode(parentDirOf(findRelativePath(nopts[0]))).contents.findIndex(obj => obj.name == fileOfPath(nopts[0]) && obj.type == pathToNode(findRelativePath(nopts[0])).type)], 1);} else {stdout = doesExist(parentDirOf(findRelativePath(nopts[1])), 'directory').message;}} else {stdout = doesExist(findRelativePath(nopts[0]), 'any').message;}"
                },
                {
                    "name": "js",
                    "type": "file",
                    "contents": "stdout = eval(args.join(' '));"
                },
                {
                    "name": "jpm",
                    "type": "file",
                    "contents": "switch (nopts[0] ? nopts[0].trim() : '') { case '': case 'help': stdout = '-Version:\\njpm 0.1\\n\\n-Operations:\\nupdate\\ninstall\\nhelp'; break; case 'update': break; default: stdout = `${nopts[0]}: invalid operation`; break; }"
                }

            ]
        },
        {
            "name": "run",
            "type": "directory",
            "contents": [
                {
                    "name": "hub",
                    "type": "file",
                    "contents": "<!DOCTYPE html> <html>  <head>     <style>         body {             margin: 0;         }          header {             background-color: dimgray;             top: 0;             width: 100%;             height: 10vh;             position: fixed;             display: flex;         }          h1 {             margin: 3vh;             font-size: 4vh;             font-family: 'Courier New', Courier, monospace;         }          img {             height: 6vh;             margin: 2vh;         }          main {             background-color: whitesmoke;             bottom: 0;             width: 100%;             height: 90vh;             position: fixed;             font-size: 2vh;         }          #container {             margin: 2vh;             border: black 2px solid;             border-radius: 10px;             height: 80vh;             padding: 2vh;             text-align: justify;             width: calc(80vw - 8vh);             float: right;         }          #menu {             height: 80vh;             border: black 2px double;             border-radius: 10px;             width: calc(20vw - 8vh);             position: fixed;             margin: 2vh;             padding: 2vh;         }          .menuopt {             width: 100%;             height: 14.6%;             border: black 2px double;             border-radius: 10px;             margin-bottom: 2vh;             background: lightgray;             transition: background 0.3s ease;             font-family: 'Courier New', Courier, monospace;             font-size: calc(1vw + 1vh);         }          .menuopt:hover {             background: gray;             transition: background 0.3s ease;         }          .appBtn {             width: 120%;             height: 6vhpx;             display: flex;             align-items: center;             user-select: none;             cursor: pointer;             border: black 1px solid;             border-radius: 10px;             font-size: 2.5vh;             background-color: white;         }          .appBtn:hover {             background-color: lightgray;         }          table {             border: black 1px solid;             border-collapse: collapse;             max-width: 50vw;             max-height: 40vh;         }          table td,         th {             border: black 1px solid;             margin: 0;             padding: 5px;         }          .actionBtn {             border: black 2px double;             border-radius: 10px;             margin-bottom: 2vh;             background: lightgray;             transition: background 0.3s ease;             font-family: 'Courier New', Courier, monospace;             font-size: calc(1vw + 1vh);         }          .actionBtn:hover {             background: gray;             transition: background 0.3s ease;             cursor: pointer;         }          .actionBtn:hover[disabled=''] {             transition: none;             background: lightgray;             cursor: not-allowed;         }          td>input[type='checkbox'] {             position: relative;             width: 2vh;             height: 2vh;         }     </style> </head>  <body>     <header><img src='javascript-os.png' alt='JSOS'>         <h1>JavaScriptOS Hub</h1>     </header>     <main>         <div id='menu'> <button class='menuopt'>WELCOME</button> <button class='menuopt'>HOW TO USE</button> <button                 class='menuopt'>APPLICATIONS</button> <button class='menuopt'></button> <button                 class='menuopt'>SYSTEM</button> <button class='menuopt'>SETTINGS</button> </div>         <div id='container'>             <div id='welcome-div' class='scrdiv'> Thank you for installing <b>JavaScriptOS</b>! <br><br>                 <b>JavaScriptOS</b> is an operating system simulator made to simulate a user-friendly operating system                 inside your browser. No files are required to use <b>JavaScriptOS</b>, all you need is a browser!                 <br><br> Similarly to all famous operating systems, <b>JavaScriptOS</b> has started with a CLI. (Command                 Line Interface) Fortunately, we were able to upgrade it to a familiar and user-friendly environment. We                 have been able to make it widely customizable because it is designed with html and css, but it is ran by                 Javascript.             </div>             <div id='applications-div' class='scrdiv'> </div>             <div id='system-div' class='scrdiv'>                 <h1>System</h1>                 <div>                     <h2>Filesystem Statistics</h2>                     <table class='stats'>                         <thead>                             <th>Type</th>                             <th>Value</th>                         </thead>                         <tbody>                             <tr>                                 <td>Files</td>                                 <td id='stats-files'></td>                             </tr>                             <tr>                                 <td>Directories</td>                                 <td id='stats-dirs'></td>                             </tr>                             <tr>                                 <td>Allocated</td>                                 <td id='stats-allocated'></td>                             </tr>                             <tr>                                 <td>Total Depth</td>                                 <td id='stats-depth'></td>                             </tr>                         </tbody>                     </table>                     <div id='external-fs-actions'>                         <h2>External Filesystem Actions</h2>                         <button class='actionBtn' onclick='importFs();'>Import</button>                         <button class='actionBtn' onclick='exportFs();'>Export</button>                     </div>                     <h2>Repair Filesystem Errors</h2>                     <button class='actionBtn' id='scan-only'>SCAN</button>                     <button class='actionBtn' id='scan-repair' disabled>REPAIR</button>                     <i id='scan-status'></i>                     <table id='scan-result'>                         <thead>                             <th>File</th>                             <th>Description</th>                         </thead>                         <tbody>                          </tbody>                     </table>                 </div>             </div>             <div id='settings-div' class='scrdiv'>                 <h1>Settings</h1>                 <h2>Application permissions</h2>                 <table id='app-permissions'>                     <thead>                         <th>Application</th>                         <th>Filesystem</th>                         <th>Manage applications</th>                     </thead>                     <tbody>                      </tbody>                 </table>                 <button id='save-app-permissions' disabled>Save Changes</button>             </div>         </div>     </main>     <\script>         function oneTimeHandshake(event) {             if (typeof (event.data.body) == 'string' && event.data.body.endsWith('.html')) {                 Array.from(document.getElementsByTagName('img')).forEach(item => {                     item.src = `${event.data.body.split('/').slice(0, -1).join('/')}/${item.src}`;                 });             }         }         window.parent.postMessage({ method: 'HANDSHAKE', token: window.token }, '*');         window.addEventListener('message', oneTimeHandshake);          let menuopts = document.getElementsByClassName('menuopt');         for (var i = 0; i < menuopts.length; i++) {             menuopts[i].addEventListener('click', (event) => {                 let divs = document.querySelector('#container').getElementsByClassName('scrdiv');                 for (var i = 0; i < divs.length; i++) {                     divs[i].style.display = 'none';                 } document.getElementById(`${event.target.innerHTML.toLowerCase()}-div`).style.display = 'inline-block';             });         }         let divs = document.querySelector('#container').getElementsByClassName('scrdiv');         for (var i = 0; i < divs.length; i++) {             divs[i].style.display = 'none';         }         document.getElementById('welcome-div').style.display = 'inline-block';         document.getElementById('applications-div').innerHTML = Apps.map(obj => `<div class='appBtn' ${obj.run == '/run/hub' ? 'disabled' : ''}                     id='${JSON.stringify(obj)}'><img src='${obj.icon}'>                     <div style='display: grid;'><b>${obj.name}</b><i>(${obj.run})</i></div>                 </div>`).join('<br>');         let appBtns = document.getElementsByClassName('appBtn');         for (var i = 0; i < appBtns.length; i++) {             appBtns[i].addEventListener('click', (event) => {                 let appBtn = event.currentTarget;                 let appObj = JSON.parse(appBtn.id);                 window.parent.postMessage({ type: 'request', method: 'open', value: appObj, token: window.token }, '*');             });         }           function countFiles(jsonData) {             let totalFiles = 0;              function traverse(directory) {                 for (const item of directory.contents) {                     if (item.type === 'file') {                         totalFiles++;                     } else if (item.type === 'directory') {                         traverse(item);                     }                 }             }              traverse(jsonData);             return totalFiles;         }          function countDirectories(jsonData) {             let totalDirectories = 0;              function traverse(directory) {                 for (const item of directory.contents) {                     if (item.type === 'directory') {                         totalDirectories++;                         traverse(item);                     }                 }             }              traverse(jsonData);             return totalDirectories;         }           function calculateDepth(jsonData) {             function traverse(directory, currentDepth) {                 let maxDepth = currentDepth;                  for (const item of directory.contents) {                     if (item.type === 'directory') {                         const depth = traverse(item, currentDepth + 1);                         maxDepth = Math.max(maxDepth, depth);                     }                 }                  return maxDepth;             }              return traverse(jsonData, 0);         }             function calculateStorage(jsonData) {             let totalStorage = 0;              function traverse(directory) {                 for (const item of directory.contents) {                     if (item.type === 'file') {                         totalStorage += item.contents.length;                     } else if (item.type === 'directory') {                         traverse(item);                     }                 }             }              traverse(jsonData);             return totalStorage;         }          function formatBytes(bytes) {             if (bytes === 0) return '0 Bytes';             const k = 1024;             const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];             const i = Math.floor(Math.log(bytes) / Math.log(k));             return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];         }          document.getElementById('stats-files').textContent = countFiles(fs);         document.getElementById('stats-dirs').textContent = countDirectories(fs);         document.getElementById('stats-depth').textContent = calculateDepth(fs);         document.getElementById('stats-allocated').textContent = formatBytes(calculateStorage(fs));          function nodeToPath(node) {             let path = [];             while (node.parent) {                 path.unshift(node.name);                 node = node.parent;             }             return path.join('/');         }          function exportFs() {             var download = document.createElement('a');             download.a = 'filesystem.json';             download.href = `data:application/json;${JSON.stringify(fs)}`;             download.click();         }          function importFs() {             let fileInput = document.createElement('input');             fileInput.type = 'file';             fileInput.accept = '.json';             fileInput.click();             fileInput.onchange = function () {                 const file = fileInput.files[0];                 if (!file) {                     return;                 }                  const reader = new FileReader();                 reader.onload = function (event) {                     const content = event.target.result;                     try {                         const jsonData = JSON.parse(content);                         window.parent.postMessage({ type: 'request', method: 'update', var: 'fs', value: jsonData, token: window.token }, '*');                         window.onmessage = function (event) {                             if (event.data === true) {                                 window.alert('Successfuly updated filesystem');                             }                             else {                                 window.alert('Could not update filesystem. Check application permissions?');                             }                         }                     } catch (error) {                         window.alert('Error parsing JSON:', error, '. Keeping filesystem');                     }                 };                 reader.readAsText(file);             }         }          function scanFileSystem(statusElement) {             let fsClone = dirWParents(fs);             let badFileList = [];              function updateStatus(status) {                 statusElement.innerText = `${status} [] (${badFileList.length} bad items found)`;             }              function scanfs(directory) {                 let seenNames = new Set();                 for (const item of directory.contents) {                     updateStatus('Scanning for item name conflicts...');                     if (seenNames.has(item.name)) {                         badFileList.push({ file: item, path: nodeToPath(item), reason: 'Duplicate directory name' });                     } else {                         seenNames.add(item.name);                     }                     ['/', '|', '$'].forEach(character => {                         if (item.name.includes(character)) {                             badFileList.push({ file: item, path: nodeToPath(item), reason: `Item name contains prohibited character: ${character}` });                         }                     });                     if (!item.name) {                         badFileList.push({ file: item, path: nodeToPath(item), reason: 'Item has no name' });                     }                     updateStatus('Scanning for item type conflicts...');                     if (item.type !== 'directory' && item.type !== 'file') {                         badFileList.push({ file: item, path: nodeToPath(item), reason: 'Item is neither file nor directory' });                     }                     updateStatus('Scanning for item structure conflicts...');                     if (item.type == 'directory' && typeof (item.contents) !== 'object') {                         badFileList.push({ file: item, path: nodeToPath(item), reason: 'Invalid directory structure' });                     }                     if (item.type == 'file' && typeof (item.contents) !== 'string') {                         badFileList.push({ file: item, path: nodeToPath(item), reason: 'Invalid file structure' });                     }                     if (item.type == 'directory') {                         scanfs(item);                     }                 }             }              scanfs(fsClone);              return badFileList;         }          function dirWParents(fs, parent = null) {             let clonedFs = JSON.parse(JSON.stringify(fs));              function traverse(node, parentNode) {                 if (node.type === 'directory') {                     node.parent = parentNode;                     node.contents.forEach(item => traverse(item, node));                 } else if (node.type === 'file') {                     node.parent = parentNode;                 }             }              traverse(clonedFs, parent);             return clonedFs;         }          document.getElementById('scan-only').addEventListener('click', () => {             document.getElementById('scan-only').disabled = true;             let scanres = scanFileSystem(document.getElementById('scan-status'));             document.getElementById('scan-status').innerText = 'Scan finished. Results:';             let resultsTableBody = document.getElementById('scan-result').querySelector('tbody');             resultsTableBody.innerHTML = '';             scanres.forEach(fileRes => {                 resultsTableBody.innerHTML += `<tr><td>${fileRes.path}</td><td>${fileRes.reason}</td></tr>`;             });             document.getElementById('scan-only').disabled = false;         });          document.getElementById('app-permissions').querySelector('tbody').innerHTML = Apps.map(app => `<tr><td>${app.name}</td><td><input id='${app.name}-fs-read' style='margin-left: 35%;' type='checkbox' ${(app.permissions.findIndex(permission => permission.name == 'fs') !== -1) ? 'checked' : ''}><input id='${app.name}-fs-write' type='checkbox' ${(app.permissions.findIndex(permission => permission.name == 'fs' && permission.write) !== -1) ? 'checked' : ''}></td><td><input class='${app.name}-Apps-read' style='margin-left: 35%;' type='checkbox' ${(app.permissions.findIndex(permission => permission.name == 'Apps') !== -1) ? 'checked' : ''}><input id='${app.name}-Apps-write' type='checkbox' ${(app.permissions.findIndex(permission => permission.name == 'Apps' && permission.write) !== -1) ? 'checked' : ''}></td></tr>`).join('');         var newPermissions = [];         Array.from(document.getElementById('app-permissions').getElementsByTagName('input')).forEach(input => { input.onchange = () => { if (!newPermissions.includes(input.id)) { newPermissions.push(input.id); document.getElementById('save-app-permissions').disabled = false; } else { newPermissions.splice(newPermissions.indexOf(input.id), 1); } } });         document.getElementById('save-app-permissions').onclick = () => {             newPermissions.forEach((permission) => {                 let segments = permission.split('-');                 let app = segments[0];                 let permissionName = segments[1];                 let permissionType = segments[2];            window.parent.postMessage({ method: 'UPDATE', value: 'Apps', newvalue: {}, token: window.token }, '*');             });         };     </\script> </body>  </html>"
                },
                {
                    "name": "terminal",
                    "type": "file",
                    "contents": "<!DOCTYPE html><html><head> <meta http-equiv='CONTENT-TYPE' content='charset=UTF-8'> <link rel='icon' href='javascript-os.png'> <style> :hover { cursor: text; } body { background-color: black; color: white; font-family: 'Courier New', Courier, monospace, serif; font-size: 16px; overflow-y: auto; overflow-x: hidden; white-space: pre-line; } .input { outline: none; margin-left: 5px; color: white; } span { color: yellow; margin: 0; } .texteditor { width: 100vw; height: 100vh; border: none; background: none; outline: none; color: inherit; font: inherit; overflow-wrap: break-word; } </style>  <\script> var user = 'user'; var host = (window.location.host ? window.location.host : 'localhost'); var historyIndex = 0; var homedir = `/home/${user}`; var pwd = homedir; let history = []; var PATH = ['/js']; var inpstyle = 0; var fvars = [{ name: '~', value: 'homedir' }, { name: './', value: `pwd + '/'` }]; var aliases = []; function NewCommandLine() { const newline = document.createElement('span'); newline.className = 'input'; newline.contentEditable = 'true'; newline.addEventListener('keydown', function (event) { if (event.key === 'Enter') { event.preventDefault(); let commands = newline.innerText.split('&'); commands.forEach(command => { printOutput(HandleCommand(parseVars(command)), 'html'); }); if (history[history.length - 1] !== newline.innerText && newline.innerText) { history.push(newline.innerText); } NewCommandLine(); historyIndex = history.length; focuslastinp(); } else if (event.key === 'ArrowUp') { event.preventDefault(); surfhistory(historyIndex, -1) } else if (event.key === 'ArrowDown') { event.preventDefault(); surfhistory(historyIndex, 1); } }); const marker = document.createElement('label'); marker.innerHTML = inpstyle == 1 ? `┌──(<span>${user}@${host}</span>)─[${pwd.replaceAll(homedir, '~')}]\\n└─<span>$</span>` : `<span>${user}@${host}</span>:${pwd.replaceAll(homedir, '~')}<span>$</span>`; document.body.appendChild(marker); document.body.appendChild(newline); document.body.appendChild(document.createElement('br')); } function surfhistory(current, change) { if (history.length == 0) { return; } var inputs = document.getElementsByClassName('input'); const lastinput = inputs[inputs.length - 1]; if (change == -1) { if (current > 0) { historyIndex--; } else { historyIndex = 0; } } else { if (current < history.length - 1) { historyIndex++; } else { lastinput.innerText = ''; return; } } lastinput.innerText = history[historyIndex]; moveCursorToEnd(lastinput); } function focuslastinp() { var inputs = document.getElementsByClassName('input'); if (inputs.length == 0) { NewCommandLine(); } inputs = document.getElementsByClassName('input'); const lastinput = inputs[inputs.length - 1]; lastinput.focus(); moveCursorToEnd(lastinput); } function moveCursorToEnd(element) { var range = document.createRange(); var selection = window.getSelection(); range.selectNodeContents(element); range.collapse(false); selection.removeAllRanges(); selection.addRange(range); } function HandleCommand(command) { if (!command.trim()) { return ''; } let cmd; let args; if (command.includes('>')) { cmd = command.split('>')[0].trim().split(' ')[0]; args = command.split('>')[0].trim().split(' ').slice(1); } else { cmd = command.trim().split(' ')[0]; args = command.trim().split(' ').slice(1); } let opts = parseOpts(args); let nopts = []; args.forEach(arg => { if (opts.findIndex(obj => obj.opt == arg && !arg.startsWith('-')) !== -1) { nopts.push(arg); } }); console.log(opts); console.log(nopts); var cmdrun = ''; var stdout = `${cmd}: command not found`; PATH.forEach(path => { if (doesExist(`${path}/${cmd}`, 'file').exists) { stdout = ''; cmdrun = pathToNode(`${path}/${cmd}`).contents; return; } }); PATH.forEach(path => { if (aliases.findIndex(obj => obj.alias == cmd) !== -1) { if (doesExist(`${path}/${aliases[aliases.findIndex(obj => obj.alias == cmd)].ref}`, 'file').exists) { stdout = ''; cmdrun = pathToNode(`${path}/${aliases[aliases.findIndex(obj => obj.alias == cmd)].ref}`).contents; } else { stdout = `${aliases[aliases.findIndex(obj => obj.alias == cmd)].ref}:  command not found`; } return; } }); eval(cmdrun); if (command.includes('>')) { let targetfile = command.split('>')[1].trim(); if (command.includes('>>')) { targetfile = command.split('>')[2].trim(); console.log('>>'); if (doesExist(parentDirOf(findRelativePath(targetfile)), 'directory').exists) { if (doesExist(findRelativePath(targetfile), 'file').exists) { pathToNode(findRelativePath(targetfile)).contents += `\\n${stdout}`; } else { pathToNode(parentDirOf(findRelativePath(targetfile))).contents.push({ name: fileOfPath(findRelativePath(targetfile)), type: 'file', contents: stdout }); } } else { stdout = doesExist(parentDirOf(findRelativePath(targetfile)), 'directory').message; } } else { if (doesExist(parentDirOf(findRelativePath(targetfile)), 'directory').exists) { if (doesExist(findRelativePath(targetfile), 'file').exists) { pathToNode(findRelativePath(targetfile)).contents = stdout; } else { pathToNode(parentDirOf(findRelativePath(targetfile))).contents.push({ name: fileOfPath(findRelativePath(targetfile)), type: 'file', contents: stdout }); } } else { stdout = doesExist(parentDirOf(findRelativePath(targetfile)), 'directory').message; } } }; window.parent.postMessage({ token: window.token, method: 'UPDATE', value: 'fs', newvalue: fs }, '*'); return stdout; } function parseVars(string) { let res = eval('`' + string.replaceAll(/$(w+)/g, (match, varName) => (window.hasOwnProperty(varName) ? (eval(varName).includes(' ') ? `'${eval(varName)}'` : eval(varName)) : '')) + '`'); fvars.forEach(fvar => { res = res.replaceAll(fvar.name, eval(fvar.value)); }); return res; } function printOutput(output) { const div = document.createElement('div'); div.innerHTML = output; div.innerHTML += '\\n\\n'; document.body.appendChild(div); } function parseOpts(args) { let res = []; args.forEach((arg, i) => { if (args[i].startsWith('-')) { if (args[i].startsWith('--')) { res.push({ opt: args[i], value: (args[i + 1] && !args[i + 1].startsWith('-') ? args[i + 1] : '') }) } else { if (args[i].slice(1).length > 1) { args[i].slice(1).split('').forEach(option => { res.push({ opt: `-${option}`, value: '' }); }) } else { res.push({ opt: args[i], value: (args[i + 1] ? args[i + 1] : '') }) } } } else if (i == 0 || !args[i - 1].startsWith('--')) { res.push({ opt: args[i], value: '' }) } }); return res; } function findRelativePath(path) { if (!path) { return pwd; } if (path == '/') { return '/'; } if (path.endsWith('/')) { path = path.slice(0, -1); } let res = (pwd == '/' ? pwd : path.startsWith('/') ? '' : pwd + '/') + path; const segments = res.split('/'); const stack = []; segments.forEach(segment => { if (segment === '..') { stack.pop(); } else if (segment !== '.' && segment !== '') { stack.push(segment); } }); res = '/' + stack.join('/'); if (res == '') { res = '/'; } return res; } function doesExist(file, type) { if (!file) { return { exists: false, message: 'Specify a file or directory' }; } if (file.endsWith('/') && file !== '/') { file = file.slice(0, -1); } if (!pathToNode(file)) { return { exists: false, message: `${file}: No such file or directory` }; } if (type !== 'file' && type !== 'directory') { return { exists: true, message: '' }; } if (type === eval(pathToNode(file)).type) { return { exists: true, message: '' }; } else if (type === 'file') { return { exists: false, message: `${file}: is a directory` }; } else { return { exists: false, message: `${file}: is not a directory` }; } }   <\/script></head><body></body> <\script> HandleCommand(parseVars('source ~/.jshrc')); NewCommandLine(); focuslastinp(); window.addEventListener('click', focuslastinp); document.body.spellcheck = false;  <\/script></html>"
                },
                {
                    "name": "notes",
                    "type": "file",
                    "contents": "<!DOCTYPE html> <html lang='en'> <head>     <meta charset='UTF-8'>     <meta name='viewport' content='width=device-width, initial-scale=1.0'>     <title>Stylish Text Editor</title>     <style>         body {             font-family: Arial, sans-serif;             margin: 0;             padding: 0;             background-color: #f0f2f5;         }         #toolbar {             background-color: #ffffff;             border-bottom: 1px solid #ddd;             padding: 10px 20px;             box-shadow: 0 2px 4px rgba(0,0,0,0.1);         }         #toolbar button {             background-color: #007bff;             border: none;             color: white;             padding: 8px 12px;             margin-right: 5px;             border-radius: 4px;             cursor: pointer;             font-size: 14px;             transition: background-color 0.3s, transform 0.2s;             font-size: calc(2vw + 2vh);         }         #toolbar button:hover {             background-color: #0056b3;         }         #toolbar button:active {             transform: scale(0.98);         }         #editor {             width: 100%;             height: 90vh;             border: 1px solid #ddd;             border-radius: 4px;             background-color: #ffffff;             padding: 15px;             box-sizing: border-box;             overflow: auto;         }     </style> </head> <body>     <div id='toolbar'>         <button onclick='formatText(`bold`)' title='Bold'>B</button>         <button onclick='formatText(`italic`)' title='Italic'>I</button>         <button onclick='formatText(`underline`)' title='Underline'>U</button>         <button onclick='formatText(`insertUnorderedList`)' title='Bullet List'>&#8226;</button>         <button onclick='formatText(`insertOrderedList`)' title='Number List'>1.</button>         <button onclick='formatText(`createLink`)' title='Insert Link'>🔗</button>         <button onclick='clearFormatting()' title='Clear Formatting'>🧹</button>         <button onclick='saveText()' title='Save'>💾</button>     </div>     <div id='editor' contenteditable='true'></div>      <\script>         function formatText(command) {             if (command === 'createLink') {                 const url = prompt('Enter the URL:', 'http://');                 if (url) {                     document.execCommand(command, false, url);                 }             } else {                 document.execCommand(command, false, null);             }         }          function clearFormatting() {             document.execCommand('removeFormat', false, null);         }          function saveText() {             const content = document.getElementById('editor').innerHTML;             const blob = new Blob([content], { type: 'text/html' });             const url = URL.createObjectURL(blob);             const a = document.createElement(`a`);             a.href = url;             a.download = 'document.html';             a.click();             URL.revokeObjectURL(url);         }     </\script> </body> </html>"
                },
                {
                    "name": "calculator",
                    "type": "file",
                    "contents": "<!DOCTYPE html> <html>  <head>     <meta http-equiv='x-ua-compatible' content='IE=11'>     <meta charset='utf-8'>     <title>Calculator V1.0</title> </head>  <body>     <div id='screen'>         <p id='scrtxt'></p>     </div>     <div id='panel'>         <div class='button' onclick='Click(this.innerHTML)'>%</div>         <div class='button' onclick='Click(this.innerHTML)'>AC</div>         <div class='button' onclick='Click(this.innerHTML)'>C</div>         <div class='button' onclick='Click(this.innerHTML)'>◄</div>         <div class='button' onclick='Click(this.innerHTML)'>( )</div>         <div class='button' onclick='Click(this.innerHTML)'> </div>         <div class='button' onclick='Click(`^`)'>xʸ</div>         <div class='button' onclick='Click(this.innerHTML)'>÷</div>         <div class='button pad' onclick='Click(this.innerHTML)'>7</div>         <div class='button pad' onclick='Click(this.innerHTML)'>8</div>         <div class='button pad' onclick='Click(this.innerHTML)'>9</div>         <div class='button' onclick='Click(this.innerHTML)'>×</div>         <div class='button pad' onclick='Click(this.innerHTML)'>4</div>         <div class='button pad' onclick='Click(this.innerHTML)'>5</div>         <div class='button pad' onclick='Click(this.innerHTML)'>6</div>         <div class='button' onclick='Click(this.innerHTML)'>-</div>         <div class='button pad' onclick='Click(this.innerHTML)'>1</div>         <div class='button pad' onclick='Click(this.innerHTML)'>2</div>         <div class='button pad' onclick='Click(this.innerHTML)'>3</div>         <div class='button' onclick='Click(this.innerHTML)'>+</div>         <div class='button pad' onclick='Click(this.innerHTML)'>+/-</div>         <div class='button pad' onclick='Click(this.innerHTML)'>0</div>         <div class='button pad' onclick='Click(this.innerHTML)'>.</div>         <div class='button result' onclick='Click(this.innerHTML)'>=</div>     </div> <!--Styles And Scripts-->     <\script>         var screen = document.getElementById('scrtxt'); function flip(inp) { if (inp === undefined) { return inp; } var res; for (var i = inp.length - 1; i > -1; i--) { res += inp[i]; } return res.substring(9); } function Click(button) { try { handlekeys(button); } catch (error) { screen.innerHTML = error; screen.style.fontSize = '15px'; } } function handlekeys(key) { if (screen.innerHTML.toLowerCase().indexOf('error') !== -1) { screen.innerHTML = ''; screen.style.fontSize = '35px'; } var text = screen.innerHTML; var plainmath = text.replaceAll('÷', '/'); plainmath = plainmath.replaceAll('×', '*'); plainmath = plainmath.replaceAll('%', '/100'); plainmath = plainmath.replaceAll('^', '**'); if (key == '=') { if (plainmath !== '') { console.log(plainmath); screen.innerHTML = eval(plainmath); } } else if (key == 'AC' || key == 'C') { screen.innerHTML = ''; } else if (key == '◄') { if (text.length > 1) { screen.innerHTML = flip(flip(text).substring(1)); } else { screen.innerHTML = ''; } } else if (key == '+/-') { if (screen.innerHTML[0] == '-') { screen.innerHTML = text.slice(1); } else { screen.innerHTML = '-' + text; } } else if (key == '( )') { if (screen.innerHTML.lastIndexOf('(') > screen.innerHTML.lastIndexOf(')')) { screen.innerHTML += ')'; } else { screen.innerHTML += '('; } } else if (key == ' ') { alert('Coming Soon!'); } else { screen.innerHTML += key; } } const allowedKeys = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', '%', '/', '*', '+', '-', '^', '(', ')', 'c', 'Backspace', 'Enter']; window.onkeyup = function (event) { if (allowedKeys.indexOf(event.key) !== -1) { if (event.key == 'Enter') { handlekeys('='); } else if (event.key == 'Backspace') { handlekeys('◄'); } else { handlekeys(event.key); } } }  </\script>     <style>         #screen {             height: 12vh;             width: 76vw;             top: 10vh;             left: 10vw;             right: 10vw;             border: 2px gray outset;             border-radius: 20px;             position: absolute;             font-size: 5vh;             justify-content: end;             align-items: center;             display: flex;             padding: 2vh 2vw;         }          #panel {             width: 80vw;             height: 60vh;             display: flex;             flex-wrap: wrap;             gap: 2vh 2vw;             bottom: 10vh;             position: absolute;             left: 10vw;             right: 10vw;             user-select: none;         }          .button {             flex: 1 1 20%;             font-size: 4vh;             padding: 0;             margin: 0;             display: flex;             justify-content: center;             align-items: center;             border: 1px dimgray solid;             border-radius: 20px;             background-color: white;             transition: background 0.5s ease;         }          .button.pad {             background-color: lightgray;         }          .button.result {             background-color: gray;         }          .button:hover {             background-color: dimgray;             transition: background 0.3s ease;         }     </style> </body>  </html>"
                },
                {
                    "name": "camera",
                    "type": "file",
                    "contents": "<!DOCTYPE html> <html lang='en'> <head>     <meta charset='UTF-8'>     <meta name='viewport' content='width=device-width, initial-scale=1.0'>     <title>Camera App</title>     <style>         body {             margin: 0;             padding: 0;             background-color: #000;             overflow: hidden;             font-family: Arial, sans-serif;             color: #fff;             text-align: center;         }          #cameraContainer {             position: relative;             width: 100vw;             height: 100vh;             overflow: hidden;         }          video {             position: absolute;             top: 0;             left: 0;             width: 100vw;             height: 100vh;             object-fit: cover;             background: #000;         }          canvas {             display: none;         }          #controls {             position: absolute;             bottom: 20px;             width: 100%;             display: flex;             justify-content: center;             gap: 10px;             padding: 0 10px;         }          button {             background-color: #007bff;             border: none;             color: white;             padding: 12px;             border-radius: 50%;             cursor: pointer;             font-size: 20px;             transition: background-color 0.3s, transform 0.2s;             display: flex;             align-items: center;             justify-content: center;         }          button:hover {             background-color: #0056b3;         }          button:active {             transform: scale(0.98);         }     </style> </head> <body>     <div id='cameraContainer'>         <video id='video' autoplay></video>         <canvas id='canvas'></canvas>         <div id='controls'>             <button id='toggleMode'>📷</button> <!-- Toggle between photo and video mode -->             <button id='takeAction' disabled>📸</button> <!-- Take photo or start/stop recording -->             <button id='switchCamera' disabled>🔄</button> <!-- Switch camera -->         </div>     </div>      <\script>         let video = document.getElementById('video');         let canvas = document.getElementById('canvas');         let context = canvas.getContext('2d');         let mediaRecorder;         let recordedChunks = [];         let currentStream;         let isPhotoMode = true;         let frontCamera = false;          const constraints = {             video: { facingMode: 'user' }         };          async function startCamera() {             try {                 currentStream = await navigator.mediaDevices.getUserMedia(constraints);                 video.srcObject = currentStream;                 document.getElementById('takeAction').disabled = false;                 document.getElementById('switchCamera').disabled = false;             } catch (error) {                 console.error('Error accessing camera: ', error);             }         }          function stopCamera() {             currentStream.getTracks().forEach(track => track.stop());             document.getElementById('takeAction').disabled = true;             document.getElementById('switchCamera').disabled = true;         }          async function switchCamera() {             frontCamera = !frontCamera;             constraints.video.facingMode = frontCamera ? 'user' : 'environment';             stopCamera();             await startCamera();         }          function toggleMode() {             isPhotoMode = !isPhotoMode;             document.getElementById('toggleMode').innerText = isPhotoMode ? '📷' : '🎥';             document.getElementById('takeAction').innerText = isPhotoMode ? '📸' : '🔴';         }          function takeAction() {             if (isPhotoMode) {                 takePhoto();             } else {                 toggleRecording();             }         }          function takePhoto() {             canvas.width = video.videoWidth;             canvas.height = video.videoHeight;             context.drawImage(video, 0, 0, canvas.width, canvas.height);             const photoUrl = canvas.toDataURL('image/png');             const a = document.createElement('a');             a.href = photoUrl;             a.download = 'photo.png';             a.click();         }          function toggleRecording() {             if (mediaRecorder && mediaRecorder.state === 'recording') {                 stopRecording();             } else {                 startRecording();             }         }          function startRecording() {             mediaRecorder = new MediaRecorder(currentStream, { mimeType: 'video/webm' });             mediaRecorder.ondataavailable = (e) => recordedChunks.push(e.data);             mediaRecorder.onstop = () => {                 const blob = new Blob(recordedChunks, { type: 'video/webm' });                 const videoUrl = URL.createObjectURL(blob);                 const a = document.createElement('a');                 a.href = videoUrl;                 a.download = 'video.webm';                 a.click();                 recordedChunks = [];             };             mediaRecorder.start();             document.getElementById('takeAction').innerText = '⏹️';         }          function stopRecording() {             mediaRecorder.stop();             document.getElementById('takeAction').innerText = '🔴';         }          document.getElementById('toggleMode').addEventListener('click', toggleMode);         document.getElementById('takeAction').addEventListener('click', takeAction);         document.getElementById('switchCamera').addEventListener('click', switchCamera);          startCamera();     </\script> </body> </html>"
                }
            ]
        },
        {
            "name": "home",
            "type": "directory",
            "contents": [
                {
                    "name": "user",
                    "type": "directory",
                    "contents": [
                        {
                            "name": ".jshrc",
                            "type": "file",
                            "contents": "inpstyle = 0; window.addEventListener('keydown', (event) => { if(event.ctrlKey && event.key === 'p') { event.preventDefault(); inpstyle = Math.abs(inpstyle - 1); ['label', 'span', 'br'].forEach(element => { Array.from(document.getElementsByTagName(element)).slice(-1)[0].remove(); }); NewCommandLine(); focuslastinp(); } });"
                        }
                    ]
                }
            ]
        }
    ]
};

function pathToNode(fullpath) {
    if (fullpath == '/') { return fs; }
    if (fullpath.endsWith('/')) { fullpath = fullpath.slice(0, -1); }
    var res = 'fs';
    var pathsegs = fullpath.split('/').slice(1);
    pathsegs.forEach((step, index) => {
        if (step.trim() == '') { res = 'undefined'; return; }
        if (step == '..') {
            if (index == 0) {
                res = 'undefined';
                return;
            }
            else {
                res = res.split('.').slice(0, -1).join('.');
            }
        }
        else {
            if (index == pathsegs.length - 1) {
                res += `.contents[${eval(res).contents.findIndex(obj => obj.name == step)}]`;
            }
            else {
                res += `.contents[${eval(res).contents.findIndex(obj => obj.name == step && obj.type == 'directory')}]`;
            }
        }
        if (eval(res) == undefined) { res = 'undefined'; return; }
    });
    return eval(res);
}

function parentDirOf(file) {
    return file.split("/").slice(0, -1).join("/") == "" ? "/" : file.split("/").slice(0, -1).join("/");
}

function fileOfPath(path) { let pathSegmentsLength = path.split('/').length; return path.split('/')[pathSegmentsLength - 1] }

function nodeToPath(node) {
    let pathComponents = [];
    while (node) {
        pathComponents.unshift(node.name);
        node = node.parent;
    }
    let fullPath = pathComponents.join('/');
    return fullPath;
}
